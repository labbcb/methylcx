use clap::Clap;
use std::path::PathBuf;

#[derive(Clap)]
pub struct Opts {
    #[clap(subcommand)]
    pub subcmd: SubCommand,
}

#[derive(Clap)]
pub enum SubCommand {
    Deduplicate(DeduplicateOpts),
    ExtractSingle(ExtractSingleOpts),
    ExtractPaired(ExtractPairedOpts),
    ConvertToFastq(ConvertToFastqOpts),
}

/// Removes duplicated reads while keeping the first one
#[derive(Clap)]
pub struct DeduplicateOpts {
    /// Input mapped reads by Bismark aligner (BAM/SAM).
    #[clap(parse(from_os_str))]
    pub input: PathBuf,

    /// Output deduplicated reads (BAM).
    #[clap(parse(from_os_str))]
    pub output: PathBuf,

    /// Either is paired-end sequencing or single-end (default)
    #[clap(long)]
    pub paired: bool,
}

/// Calculates DNA methylation across genome for single-end reads
#[derive(Clap)]
pub struct ExtractSingleOpts {
    /// Input mapped reads by Bismark aligner (BAM/SAM).
    #[clap(parse(from_os_str))]
    pub input: PathBuf,
    /// Clip first bases of aligned sequence in end-to-end mode (5' orientation).
    #[clap(long, default_value = "0")]
    pub five_prime_clip: u32,
    /// Clip last bases of aligned sequence in end-to-end mode (3' orientation).
    #[clap(long, default_value = "0")]
    pub three_prime_clip: u32,
    /// Clip first bases of aligned sequence in local mode (5' orientation).
    #[clap(long, default_value = "0")]
    pub five_soft_clip: u32,
    /// Clip last bases of aligned sequence in local mode (3' orientation).
    #[clap(long, default_value = "0")]
    pub three_soft_clip: u32,
    /// Minimum read length.
    #[clap(long, default_value = "0")]
    pub min_length: u32,
    /// Counts of (un)methylated and coverage across cycles (CSV).
    #[clap(long, parse(from_os_str))]
    pub mbias: Option<PathBuf>,

    /// Counts of (un)methylated and coverage across genome in CpG-context (cov, gzipped).
    #[clap(long, parse(from_os_str))]
    pub cpg_bismark_cov: Option<PathBuf>,
    /// Counts of (un)methylated and coverage across genome in CHG-context (cov, gzipped).
    #[clap(long, parse(from_os_str))]
    pub chg_bismark_cov: Option<PathBuf>,
    /// Counts of (un)methylated and coverage across genome in CHH-context (cov, gzipped).
    #[clap(long, parse(from_os_str))]
    pub chh_bismark_cov: Option<PathBuf>,

    /// Counts of (un)methylated and coverage across genome in CpG-context (bedGraph, gzipped).
    #[clap(long, parse(from_os_str))]
    pub cpg_bed_graph: Option<PathBuf>,
    /// Counts of (un)methylated and coverage across genome in CHG-context (bedGraph, gzipped).
    #[clap(long, parse(from_os_str))]
    pub chg_bed_graph: Option<PathBuf>,
    /// Counts of (un)methylated and coverage across genome in CHH-context (bedGraph, gzipped).
    #[clap(long, parse(from_os_str))]
    pub chh_bed_graph: Option<PathBuf>,

    /// Minimum coverage to report loci. To output every loci see cytosine-report.
    #[clap(long, default_value = "1")]
    pub min_coverage: u32,

    /// Strand-specific counts of (un)methylated CpG across genome (cytosine-report, gzipped).
    #[clap(long, parse(from_os_str))]
    pub cpg_cytosine_report: Option<PathBuf>,
    /// Strand-specific counts of (un)methylated CHG across genome (cytosine-report, gzipped).
    #[clap(long, parse(from_os_str))]
    pub chg_cytosine_report: Option<PathBuf>,
    /// Strand-specific counts of (un)methylated CHH across genome (cytosine-report, gzipped).
    #[clap(long, parse(from_os_str))]
    pub chh_cytosine_report: Option<PathBuf>,

    /// Reference genome file (FASTA format, gzipped). Only required for cytosine-report.
    #[clap(long, parse(from_os_str))]
    pub genome: Option<PathBuf>,

    /// Starting vector capacity to store per sequencing cycles data.
    #[clap(long, default_value = "200")]
    pub start_capacity: usize,
}

/// Calculates DNA methylation across genome for paired-end reads
///
/// Given mapped reads data generated by aligner in local mode it
/// extracts matches from soft-cliped reads using CIGAR string.
/// Soft-clips (S in CIGAR) might occur at 5' or 3' ends of the read,
/// which mean that a portion of the reads did not match with genome.
/// Using the length of the operation (the number followed by S),
/// it calculates how many bases must be removed from the read.
///
/// Reads that were unmapped, duplicated or have CIGAR string empty are
/// discarded and considered 'invalid'.
///
/// Soft-clipped reads from bisulfite sequencing data might have
/// contamination. Use '--five-soft-clip' and '--three_soft_clip'
/// parameters to remove more bases from 5' and 3' ends, respectivelly.
/// It only applies to the ends of reads that have soft-clip operation.
/// It does not remove any further base by default, recommended is 10.
///
/// Final reads (after clips) that have length less than cutoff are
/// discarded and written to 'remove' file (BAM format).
/// Default value is 20. Use '--min-length' to change it.
///
/// Reverse mapped reads are reverted back.
/// 'Passed' reads are written to 'output' file (FASTQ format).
#[derive(Clap)]
pub struct ExtractPairedOpts {
    /// Input mapped reads by Bismark aligner (BAM/SAM).
    #[clap(parse(from_os_str))]
    pub input: PathBuf,

    // /// Clip first bases of aligned sequence in end-to-end mode (forward, 5' orientation).
    // #[clap(long, default_value = "0")]
    // pub five_prime_clip_1: u32,
    // /// Clip last bases of aligned sequence in end-to-end mode (forward, 3' orientation).
    // #[clap(long, default_value = "0")]
    // pub three_prime_clip_1: u32,
    // /// Clip first bases of aligned sequence in local mode (forward, 5' orientation).
    // #[clap(long, default_value = "0")]
    // pub five_soft_clip_1: u32,
    // /// Clip last bases of aligned sequence in local mode (forward, 3' orientation).
    // #[clap(long, default_value = "0")]
    // pub three_soft_clip_1: u32,
    // /// Minimum read length.
    // #[clap(long, default_value = "0")]
    // /// Clip first bases of aligned sequence in end-to-end mode (reverse, 5' orientation).
    // #[clap(long, default_value = "0")]
    // pub five_prime_clip_2: u32,
    // /// Clip last bases of aligned sequence in end-to-end mode (reverse, 3' orientation).
    // #[clap(long, default_value = "0")]
    // pub three_prime_clip_2: u32,
    // /// Clip first bases of aligned sequence in local mode (reverse, 5' orientation).
    // #[clap(long, default_value = "0")]
    // pub five_soft_clip_2: u32,
    // /// Clip last bases of aligned sequence in local mode (reverse, 3' orientation).
    // #[clap(long, default_value = "0")]
    // pub three_soft_clip_2: u32,
    /// Minimum read length.
    // #[clap(long, default_value = "0")]
    // pub min_length: u32,

    /// Counts of (un)methylated and coverage across cycles (CSV).
    #[clap(long, parse(from_os_str))]
    pub mbias: Option<PathBuf>,

    /// Counts of (un)methylated and coverage across genome in CpG-context (cov, gzipped).
    #[clap(long, parse(from_os_str))]
    pub cpg_bismark_cov: Option<PathBuf>,
    /// Counts of (un)methylated and coverage across genome in CHG-context (cov, gzipped).
    #[clap(long, parse(from_os_str))]
    pub chg_bismark_cov: Option<PathBuf>,
    /// Counts of (un)methylated and coverage across genome in CHH-context (cov, gzipped).
    #[clap(long, parse(from_os_str))]
    pub chh_bismark_cov: Option<PathBuf>,

    /// Counts of (un)methylated and coverage across genome in CpG-context (bedGraph, gzipped).
    #[clap(long, parse(from_os_str))]
    pub cpg_bed_graph: Option<PathBuf>,
    /// Counts of (un)methylated and coverage across genome in CHG-context (bedGraph, gzipped).
    #[clap(long, parse(from_os_str))]
    pub chg_bed_graph: Option<PathBuf>,
    /// Counts of (un)methylated and coverage across genome in CHH-context (bedGraph, gzipped).
    #[clap(long, parse(from_os_str))]
    pub chh_bed_graph: Option<PathBuf>,

    /// Minimum coverage to report loci. To output every loci see cytosine-report.
    #[clap(long, default_value = "1")]
    pub min_coverage: u32,

    /// Strand-specific counts of (un)methylated CpG across genome (cytosine-report, gzipped).
    #[clap(long, parse(from_os_str))]
    pub cpg_cytosine_report: Option<PathBuf>,
    /// Strand-specific counts of (un)methylated CHG across genome (cytosine-report, gzipped).
    #[clap(long, parse(from_os_str))]
    pub chg_cytosine_report: Option<PathBuf>,
    /// Strand-specific counts of (un)methylated CHH across genome (cytosine-report, gzipped).
    #[clap(long, parse(from_os_str))]
    pub chh_cytosine_report: Option<PathBuf>,

    /// Reference genome file (FASTA format, gzipped). Only required for cytosine-report.
    #[clap(long, parse(from_os_str))]
    pub genome: Option<PathBuf>,

    /// Starting vector capacity to store per sequencing cycles data.
    #[clap(long, default_value = "200")]
    pub start_capacity: usize,
}

/// Convert soft-clipped BAM to single-end FASTQ file
#[derive(Clap)]
pub struct ConvertToFastqOpts {
    /// Input file with local-aligned reads (BAM/SAM/CRAM).
    #[clap(parse(from_os_str))]
    pub input: PathBuf,
    /// Output file with alignment matches (FASTQ).
    #[clap(parse(from_os_str))]
    pub output: PathBuf,
    /// Alignment file with records that were filtered out (BAM).
    #[clap(parse(from_os_str))]
    pub remove: PathBuf,
    /// Number of bases to remove from 5' end of soft-clipped reads.
    #[clap(long, default_value = "0")]
    pub five_soft_clip: u32,
    /// Number of bases to remove from 3' end of soft-clipped reads.
    #[clap(long, default_value = "0")]
    pub three_soft_clip: u32,
    /// Minimum length to consider a read valid.
    #[clap(long, default_value = "20")]
    pub min_length: u32,
}
